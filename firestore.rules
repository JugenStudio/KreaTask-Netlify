rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /////////////////////////
    // USERS COLLECTION
    /////////////////////////
    match /users/{userId} {
      // Everyone can get their own user data
      allow get: if request.auth != null && request.auth.uid == userId;
      // Listing all users restricted to Admin only
      allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "roles_admin";
      
      // Users can update their own data except role
      allow update: if request.auth != null 
                      && request.auth.uid == userId
                      && !(request.resource.data.keys().hasAny(['role'])); 

      // Only Admin can set roles or delete users
      allow delete, create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "roles_admin";
    }

    /////////////////////////
    // TASKS COLLECTION
    /////////////////////////
    match /tasks/{taskId} {
      function isAssignee() {
        return request.auth != null && request.resource.data.assignees.hasAny([request.auth.uid]);
      }

      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "roles_admin";
      }

      // Anyone assigned can read
      allow get: if request.auth != null && resource.data.assignees.hasAny([request.auth.uid]);
      allow list: if request.auth != null; // query restricted with where("assignees", "array-contains", uid)

      // Assignee can create task for themselves (optional)
      allow create: if request.auth != null && request.resource.data.assignees.hasAny([request.auth.uid]);
      // Assignee can update task if assigned
      allow update: if request.auth != null && resource.data.assignees.hasAny([request.auth.uid]);
      // Only Admin can delete
      allow delete: if isAdmin();
    }

    /////////////////////////
    // ROLES COLLECTIONS
    /////////////////////////
    match /roles_team_member/{userId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "roles_admin";
      }
      allow get: if request.auth != null;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    match /roles_team_leader/{userId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "roles_admin";
      }
      allow get: if request.auth != null;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    match /roles_admin/{userId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "roles_admin";
      }
      allow get: if request.auth != null;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /////////////////////////
    // NOTIFICATIONS COLLECTION
    /////////////////////////
    match /notifications/{notificationId} {
      allow get: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null; // needed for queries with where("userId", "==", uid)
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "roles_admin";
    }

  }
}

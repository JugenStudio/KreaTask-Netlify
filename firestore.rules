/**
 * @file Firestore Security Rules for KreaTask application.
 * @core_philosophy This ruleset enforces a strict user-ownership model, where each user has full control over their own tasks and associated data.
 * @data_structure All data is nested under /users/{userId}, ensuring clear ownership and isolation.  Role assignments are managed through separate collections: `/roles_team_member/{userId}`, `/roles_team_leader/{userId}`, `/roles_admin/{userId}`. The existence of a document in one of these role collections grants the user the respective role.
 * @key_security_decisions User listing is explicitly disallowed to prevent unauthorized data access.  All write operations are secured with owner-only checks.  The rules are designed for Authorization Independence by denormalizing authorization data (userId) directly onto documents.
 * @denormalization All task-related data includes the userId as part of the path, enabling direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user-specific task data.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User 'user123' creates a new task with ID 'task456' under their user ID.
     * @allow (update) - User 'user123' updates task 'task456' under their user ID.
     * @allow (delete) - User 'user123' deletes task 'task456' under their user ID.
     * @deny (create) - User 'user456' attempts to create a task under user 'user123''s ID.
     * @deny (update) - User 'user456' attempts to update task 'task456' under user 'user123''s ID.
     * @deny (delete) - User 'user456' attempts to delete task 'task456' under user 'user123''s ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      // Helper function to check if the request is made by the owner of the task
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the request is made by the existing owner of the task and that the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Helper function to validate task ownership on create
      function isValidTaskCreation() {
        return request.resource.data.id == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && isValidTaskCreation();
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to task revision history.
     * @path /users/{userId}/tasks/{taskId}/revisions/{revisionId}
     * @allow (create) - User 'user123' creates a new revision with ID 'revision789' for task 'task456' under their user ID.
     * @allow (update) - User 'user123' updates revision 'revision789' for task 'task456' under their user ID.
     * @allow (delete) - User 'user123' deletes revision 'revision789' for task 'task456' under their user ID.
     * @deny (create) - User 'user456' attempts to create a revision under user 'user123''s ID.
     * @deny (update) - User 'user456' attempts to update revision 'revision789' under user 'user123''s ID.
     * @deny (delete) - User 'user456' attempts to delete revision 'revision789' under user 'user123''s ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId}/revisions/{revisionId} {
      // Helper function to check if the request is made by the owner of the revision's task
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the request is made by the existing owner of the revision's task and that the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to task comments.
     * @path /users/{userId}/tasks/{taskId}/comments/{commentId}
     * @allow (create) - User 'user123' creates a new comment with ID 'comment012' for task 'task456' under their user ID.
     * @allow (update) - User 'user123' updates comment 'comment012' for task 'task456' under their user ID.
     * @allow (delete) - User 'user123' deletes comment 'comment012' for task 'task456' under their user ID.
     * @deny (create) - User 'user456' attempts to create a comment under user 'user123''s ID.
     * @deny (update) - User 'user456' attempts to update comment 'comment012' under user 'user123''s ID.
     * @deny (delete) - User 'user456' attempts to delete comment 'comment012' under user 'user123''s ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId}/comments/{commentId} {
      // Helper function to check if the request is made by the owner of the comment's task
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the request is made by the existing owner of the comment's task and that the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Assigns team member role to a user.
     * @path /roles_team_member/{userId}
     * @allow (create) - Creates a role entry if the user is authenticated.
     * @allow (get)    - Only authenticated users can check for their role existence.
     * @deny  (update) - Prevents updates once a role has been assigned.
     * @deny  (delete) - Only admins can delete this role
     * @principle Uses existence-based role assignment.
     */
    match /roles_team_member/{userId} {
       function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if request.auth != null;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }

     /**
     * @description Assigns team leader role to a user.
     * @path /roles_team_leader/{userId}
     * @allow (create) - Creates a role entry if the user is authenticated.
     * @allow (get)    - Only authenticated users can check for their role existence.
     * @deny  (update) - Prevents updates once a role has been assigned.
     * @deny  (delete) - Only admins can delete this role
     * @principle Uses existence-based role assignment.
     */
    match /roles_team_leader/{userId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if request.auth != null;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Assigns admin role to a user.
     * @path /roles_admin/{userId}
     * @allow (create) - Creates a role entry if the user is authenticated.
     * @allow (get)    - Only authenticated users can check for their role existence.
     * @deny  (update) - Prevents updates once a role has been assigned.
     * @deny  (delete) - Only admins can delete this role
     * @principle Uses existence-based role assignment.
     */
    match /roles_admin/{userId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if request.auth != null;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }
  }
}
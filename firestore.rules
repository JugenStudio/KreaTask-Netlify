rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /*
    ============================================================
    üîê FIRESTORE SECURITY RULES ‚Äî KREATASK
    Versi: v3.4 (No-Bug Stable)
    ============================================================
    */

    // === üîë AUTH HELPERS ===
    function isUserAuthenticated() {
      return request.auth != null;
    }

    // ü©µ FIX: getUserRole() perlu akses dokumen user
    // agar tidak error "missing permissions" saat evaluasi role
    function getUserRole(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }

    // === ROLE LOGIC ===
    function isSuperAdmin() {
      return isUserAuthenticated() && getUserRole(request.auth.uid) == "roles_super_admin";
    }

    function isAdmin() {
      return isUserAuthenticated() && (
        getUserRole(request.auth.uid) == "roles_admin" ||
        isSuperAdmin()
      );
    }

    function isTeamLeader() {
      return isUserAuthenticated() && (
        getUserRole(request.auth.uid) == "roles_team_leader" ||
        isAdmin()
      );
    }

    function isTeamMember() {
      return isUserAuthenticated() && (
        getUserRole(request.auth.uid) in [
          "roles_team_member",
          "roles_unassigned",
          "roles_team_leader",
          "roles_admin",
          "roles_super_admin"
        ]
      );
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    /*
    ============================================================
    üë§ USERS COLLECTION
    ============================================================
    */
    match /users/{userId} {
      // FIX: wajib allow get agar getUserRole() bisa dipanggil dari rules lain
      allow get: if isUserAuthenticated() && request.auth.uid == userId;
      allow create: if isUserAuthenticated();
      allow update: if isOwner(userId);
      allow list: if isAdmin();
      allow delete: if (isAdmin() || isSuperAdmin()) && request.auth.uid != userId;
    }

    /*
    ============================================================
    üìã TASKS COLLECTION
    ============================================================
    */
    match /tasks/{taskId} {
      // Admin & SuperAdmin full access
      allow read, list, create, update, delete: if isAdmin() || isSuperAdmin();

      // Team Leader akses menengah
      allow read, list, create, update: if isTeamLeader();

      // Team Member & Unassigned ‚Üí akses pribadi
      allow list: if isTeamMember();
      allow read: if isTeamMember();
      allow create: if isTeamMember()
        && request.resource.data.assigneesIds.size() == 1
        && request.auth.uid in request.resource.data.assigneesIds;
      allow update: if isTeamMember()
        && request.auth.uid in resource.data.assigneesIds;
    }

    /*
    ============================================================
    üîî NOTIFICATIONS COLLECTION
    ============================================================
    */
    match /notifications/{notificationId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }

    /*
    ============================================================
    ‚öôÔ∏è SETTINGS COLLECTION
    ============================================================
    */
    match /settings/{settingId} {
      allow read: if isUserAuthenticated();
      allow create, update, delete: if isAdmin() || isSuperAdmin();
    }

    /*
    ============================================================
    üß© ROLES COLLECTION
    ============================================================
    */
    match /roles/{roleId} {
      allow read, list: if isUserAuthenticated();
      allow create, update, delete: if isSuperAdmin();
    }
  }
}

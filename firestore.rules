rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function getUserRole(uid) {
      return exists(/databases/$(database)/documents/users/$(uid))
        ? get(/databases/$(database)/documents/users/$(uid)).data.role
        : "roles_unassigned";
    }

    function isAdmin() {
      return isUserAuthenticated() && getUserRole(request.auth.uid) == 'roles_admin';
    }

    function isTeamLeader() {
      return isUserAuthenticated() && getUserRole(request.auth.uid) == 'roles_team_leader';
    }

    function isTeamMember() {
      return isUserAuthenticated() && getUserRole(request.auth.uid) == 'roles_team_member';
    }

    function isUnassigned() {
      return isUserAuthenticated() && getUserRole(request.auth.uid) == 'roles_unassigned';
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    // USERS COLLECTION
    match /users/{userId} {
      allow get: if isUserAuthenticated() && request.auth.uid == userId;
      allow list: if isUserAuthenticated();
      allow create, update: if isOwner(userId);
      allow delete: if (isAdmin() || isTeamLeader()) && request.auth.uid != userId;
    }

    // TASKS COLLECTION
    match /tasks/{taskId} {
      allow get: if isUserAuthenticated() && (
        isAdmin() ||
        isTeamLeader() ||
        (isTeamMember() && request.auth.uid in resource.data.assigneesIds)
      );

      allow list: if isUserAuthenticated() && (
        isAdmin() ||
        isTeamLeader() ||
        isTeamMember() ||
        isUnassigned()
      );

      allow create: if isUserAuthenticated() && (
        isAdmin() ||
        isTeamLeader() ||
        (isTeamMember() &&
          request.resource.data.assigneesIds.size() == 1 &&
          request.auth.uid in request.resource.data.assigneesIds)
      );

      allow update: if isUserAuthenticated() && (
        isAdmin() ||
        isTeamLeader() ||
        (isTeamMember() && request.auth.uid in resource.data.assigneesIds)
      );

      allow delete: if isUserAuthenticated() && (isAdmin() || isTeamLeader());
    }

    // NOTIFICATIONS COLLECTION
    match /notifications/{notificationId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }
  }
}

/**
 * @fileOverview Firestore Security Rules for the KreaTask application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data, with
 * administrative override capabilities where appropriate. It leverages
 * hierarchical data structures to simplify security rules and avoid costly
 * `get()` operations.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves and admins.
 * - /users/{userId}/tasks/{taskId}: Tasks owned by a specific user.
 * - /users/{userId}/tasks/{taskId}/fileAssets/{fileAssetId}: File assets related to a specific task.
 * - /users/{userId}/tasks/{taskId}/revisions/{revisionId}: Revisions for a specific task.
 * - /users/{userId}/notifications/{notificationId}: Notifications for a specific user.
 * - /users/{userId}/tasks/{taskId}/revisions/{revisionId}/comments/{commentId}: Comments on a revision.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles.
 * - Tasks, file assets, revisions, and comments are accessible only to the owner (creator) and admins.
 * - List operations are generally restricted to the owner to prevent unauthorized data access.
 * - No schema validation is performed in this prototyping phase, except for critical ownership checks.
 *
 * Denormalization for Authorization:
 *  - The data structure itself is designed for authorization. Task, FileAsset, Revision, Notification and Comment ownership is encoded in the path.
 *
 * Structural Segregation:
 *  - There is no need for structural segregation as all data is private.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the resource.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the user is an existing owner of the resource.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to user profiles based on ownership.
     * @path /users/{userId}
     * @allow (get) User 'alice' (auth.uid: 'alice') can read their own profile.
     * @allow (create) User 'bob' (auth.uid: 'bob') can create their own profile.
     * @allow (update) User 'charlie' (auth.uid: 'charlie') can update their own profile.
     * @allow (delete) User 'david' (auth.uid: 'david') can delete their own profile if is admin.
     * @deny  (get) User 'eve' (auth.uid: 'eve') cannot read 'frank's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Grants access to tasks based on user ownership.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (get) User 'alice' (auth.uid: 'alice') can read their own task.
     * @allow (create) User 'bob' (auth.uid: 'bob') can create a task under their profile.
     * @allow (update) User 'charlie' (auth.uid: 'charlie') can update their own task.
     * @allow (delete) User 'david' (auth.uid: 'david') can delete their own task.
     * @deny  (get) User 'eve' (auth.uid: 'eve') cannot read 'frank's task.
     * @principle Enforces document ownership for tasks.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to file assets based on task and user ownership.
     * @path /users/{userId}/tasks/{taskId}/fileAssets/{fileAssetId}
     * @allow (get) User 'alice' (auth.uid: 'alice') can read their own file asset.
     * @allow (create) User 'bob' (auth.uid: 'bob') can create a file asset under their task.
     * @allow (update) User 'charlie' (auth.uid: 'charlie') can update their own file asset.
     * @allow (delete) User 'david' (auth.uid: 'david') can delete their own file asset.
     * @deny  (get) User 'eve' (auth.uid: 'eve') cannot read 'frank's file asset.
     * @principle Enforces document ownership for file assets.
     */
    match /users/{userId}/tasks/{taskId}/fileAssets/{fileAssetId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to revisions based on task and user ownership.
     * @path /users/{userId}/tasks/{taskId}/revisions/{revisionId}
     * @allow (get) User 'alice' (auth.uid: 'alice') can read their own revision.
     * @allow (create) User 'bob' (auth.uid: 'bob') can create a revision under their task.
     * @allow (update) User 'charlie' (auth.uid: 'charlie') can update their own revision.
     * @allow (delete) User 'david' (auth.uid: 'david') can delete their own revision.
     * @deny  (get) User 'eve' (auth.uid: 'eve') cannot read 'frank's revision.
     * @principle Enforces document ownership for revisions.
     */
    match /users/{userId}/tasks/{taskId}/revisions/{revisionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to notifications based on user ownership.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (read) User 'alice' (auth.uid: 'alice') can read their own notification.
     * @allow (create) User 'bob' (auth.uid: 'bob') can create a notification under their profile.
     * @allow (delete) User 'charlie' (auth.uid: 'charlie') can delete their own notification.
     * @deny  (read) User 'eve' (auth.uid: 'eve') cannot read 'frank's notification.
     * @principle Enforces document ownership for notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to comments based on revision, task, and user ownership.
     * @path /users/{userId}/tasks/{taskId}/revisions/{revisionId}/comments/{commentId}
     * @allow (get) User 'alice' (auth.uid: 'alice') can read their own comment.
     * @allow (create) User 'bob' (auth.uid: 'bob') can create a comment under their revision.
     * @allow (update) User 'charlie' (auth.uid: 'charlie') can update their own comment.
     * @allow (delete) User 'david' (auth.uid: 'david') can delete their own comment.
     * @deny  (get) User 'eve' (auth.uid: 'eve') cannot read 'frank's comment.
     * @principle Enforces document ownership for comments.
     */
    match /users/{userId}/tasks/{taskId}/revisions/{revisionId}/comments/{commentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}
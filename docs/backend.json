{
  "entities": {
    "Task": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Task",
      "type": "object",
      "description": "Represents a task within the KreaTask application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Task entity."
        },
        "title": {
          "type": "string",
          "description": "The title or name of the task."
        },
        "isCompleted": {
          "type": "boolean",
          "description": "Indicates whether the task is completed or not."
        }
      },
      "required": [
        "id",
        "title",
        "isCompleted"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/tasks/{taskId}",
        "definition": {
          "entityName": "Task",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores task data for each user. Includes denormalized 'userId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user who owns the task."
            },
            {
              "name": "taskId",
              "description": "The ID of the task."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/tasks/{taskId}/revisions/{revisionId}",
        "definition": {
          "entityName": "Revision",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores revision history for each task. Includes denormalized 'userId' and 'taskId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user who owns the task."
            },
            {
              "name": "taskId",
              "description": "The ID of the task."
            },
            {
              "name": "revisionId",
              "description": "The ID of the revision."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/tasks/{taskId}/comments/{commentId}",
        "definition": {
          "entityName": "Comment",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores comments for each task. Includes denormalized 'userId' and 'taskId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user who owns the task."
            },
            {
              "name": "taskId",
              "description": "The ID of the task."
            },
            {
              "name": "commentId",
              "description": "The ID of the comment."
            }
          ]
        }
      },
      {
        "path": "/roles_team_member/{userId}",
        "definition": {
          "entityName": "RoleTeamMember",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Indicates team member role for a user.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user."
            }
          ]
        }
      },
      {
        "path": "/roles_team_leader/{userId}",
        "definition": {
          "entityName": "RoleTeamLeader",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Indicates team leader role for a user.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "RoleAdmin",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Indicates admin role for a user.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the KreaTask application's features, including task submission, progress tracking, revision history, notifications, file uploads, comment summarization, and user roles. The primary goal is to ensure security, scalability, and debuggability, following the principles of Authorization Independence and Structural Segregation. Task data is stored in user-specific subcollections to enforce ownership. Each task document contains all the necessary information and denormalized data related to authorization to avoid using `get()` calls in the security rules. User roles are managed through a dedicated collection, using the principle of existence over content. This design ensures that all documents within a collection share the same security requirements, thus enabling secure `list` operations and simplifying security rules. File uploads are handled by storing file metadata within the task document, with the actual files stored in Firebase Storage."
  }
}